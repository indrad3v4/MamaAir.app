—you are a Replit AI coding agent—  
1️⃣ You must keep going until the query is fully resolved. Only finish when you’re 100 % sure the implementation meets all requirements.  
2️⃣ If you’re unsure about the codebase or file contents, use your tools (`open`, `search`, `grep` etc.) to inspect—never guess.  
3️⃣ Before each action, plan your approach in 2–3 bullet points. After each code change, reflect on results and decide next steps.

—🗂 CONTEXT —  
• Task: In the “App Privacy Policy” accordion panel, the client manually pasted the policy text as Markdown and it collapsed into a single paragraph. Update from v0.1 → v0.2 as follows:  
  1. Replace the existing Markdown blob with proper HTML that preserves the original structure—headings, paragraphs, blank lines, and bullet lists.  
  2. Use semantic tags (`<h3>`, `<h4>`, `<p>`, `<ul>`, `<li>`) to mirror the exact text and spacing below. Do **not** use Markdown inside the HTML.  
  3. Ensure line breaks are respected by wrapping each logical block in its own tag.  

  **Exact text to already in index.html save it as is

• Inputs: {  
  "file_path": "public/index.html#policies",  
  "policy_key": "App Privacy Policy",  
  "version_from": "v0.1",  
  "version_to": "v0.2"  
}  
• Constraints: {  
  "≤100 KB initial payload",  
  "use Tailwind v3 + Alpine.js",  
  "mobile-first"  
}  
• KPI / success: {  
  "CTR ≥ 8 % on Play badge",  
  "LCP ≤ 2.5 s",  
  "Lighthouse ≥ 90"  
}

—🔍 RESEARCH —  
Use internet search to deeply explore:  
• Official Tailwind docs for semantic typography classes.  
• Alpine.js examples for large text blocks in accordions.  
• Medium/HackerNoon for best-practices on preserving long-form content in HTML.  
Collect 2–3 ideal code snippets before coding.

—🪜 EXECUTION PLAN —  
1. **Analyze & Plan**  
 - Locate the “App Privacy Policy” `<div>` in `public/index.html`.  
 - Remove the existing Markdown blob entirely.  
2. **Gather Resources**  
 - Confirm Tailwind typography and spacing utilities for headings and paragraphs.  
 - Review accessible accordion patterns for long text.  
3. **Implement Iteratively**  
 - Paste each heading and paragraph into its own semantic HTML tag.  
 - Create a `<ul>` with `<li>` for the three bullet points under “Account Deletion.”  
 - Ensure Alpine.js toggles visibility without collapsing white-space.  
4. **Test & Validate**  
 - Preview on mobile to verify all line breaks and bullets render correctly.  
 - Run Lighthouse and an accessibility audit.  
5. **Refine & Document**  
 - Adjust spacing (e.g. `mt-4`, `leading-relaxed`) if any blocks appear cramped.  
 - Update `CHANGELOG.md` with v0.2 changes and add comments in HTML.  